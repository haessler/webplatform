I'm at the point where I could use some help answering some technical
questions about SVG, so I'll throw these over the wall:

* The CSS "filter" property can reference an SVG <filter> by url()
  reference. Unlike custom CSS filters & built-in functions, these SVG
  filters currently do not animate via CSS. Will this change in the
  future?  If it were to animate, I expect you'd need 2 different
  filter elements, each containing matching sequences of filter
  primitives. (CSS-only filters require matching sequences.)

* I was trying to use SVG to animate a human eye, complete with
  blinking and glancing side-to-side behavior. Example here:
  http://letmespellitoutforyou.com/samples/svg_eyeball.html I tried to
  define the white #eye ellipse as a clipping path to obscure the
  g#eyeball elements, but that prevents it from rendering its stroke &
  fill. Is there a way around this, or do clipping paths not render by
  definition?


== QUERIES ==



* Any way to anchor eyelash-shaped paths to the top portion of the
  #eye ellipse?

* Is any effort underway to make CSS animations (transforms/keyframes)
  apply to SVG attributes, rather than simply to properties?  Ideally
  you should be able to morph a path via CSS (the way you can for
  polygons defining a CSS exclusion, assuming the # of points in each
  shape match).

* Confirmed you can't use CSS to animate the value of the CSS "filter"
  property between two SVG filters referenced by url(), even when they
  use the same set of primitives, albeit with different values.  Will
  this change? (Note: you can transition matching sets of built-in &
  custom CSS filter functions.)



== COMMENTS ==

* Edge Animate: why doesn't it include path/polygon tools?

* Edge Animate: why doesn't it incorporate HTML5 audio into the
  timeline UI?

* Edge Animate: does its "keyframe" feature correspond 1-to-1 with
  CSS's, or does it also translate to SVG's SMILs?

* SVG: it appears transform attribute is 2D-only, but that you can 3D
  transform an element via CSS.

* Custom filters: How does the 3D transform space defined in custom
  filters relate to the 3D necessary to define an overall scene?  I'd
  like to be able to use perspective & rotateX to place an arbitrary
  SVG path on the ground of a scene, so that an element gets bigger
  closer to the viewer.

